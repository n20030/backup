{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"add.browser.breakpoint": "ブラウザー ブレークポイントの追加",
			"attach.node.process": "ノード プロセスへのアタッチ (プレビュー)",
			"browser.address.description": "デバッグ ポートの TCP/IP アドレス",
			"browser.baseUrl.description": "パス baseUrl を解決するためのベース URL。URL をディスク上のファイルにマップする場合、baseURL はトリミングされます。既定では、起動 URL ドメインに設定されます。",
			"browser.cwd.description": "ランタイム実行ファイルのオプションの作業ディレクトリ",
			"browser.disableNetworkCache.description": "各リクエストのネットワーク キャッシュをスキップするかどうかの制御",
			"browser.env.description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
			"browser.file.description": "ブラウザーで開くローカル HTML ファイル",
			"browser.includeDefaultArgs.description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
			"browser.inspectUri.description": "inspectUri の書き換えに使用する形式です。`{curlyBraces}` のキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\n - `url.*` は、実行中のアプリケーションの解析されたアドレスです。たとえば、`{url.port}`、`{url.hostname}`\n - `port` は、Chrome がリッスンするデバッグ ポートです。\n - `browserInspectUri` は、起動したブラウザーのインスペクター URI です。\n - `wsProtocol` は、ヒントの WebSocket プロトコルです。元の URL が `https` の場合は `wss` に設定され、それ以外の場合は `ws` に設定されます。",
			"browser.pathMapping.description": "ブラウザのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
			"browser.port.description": "ブラウザーのリモート デバッグに使用するポート。",
			"browser.runtimeArgs.description": "ランタイム実行可能ファイルに渡される省略可能な引数。",
			"browser.runtimeExecutable.description": "'カナリア'、'安定'、'カスタム'、ブラウザー実行可能ファイルのパスのいずれか。[カスタム] は、カスタム ラッパー、カスタム ビルド、または CHROME_PATH 環境変数を意味します。",
			"browser.server.description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
			"browser.skipFiles.description": "デバッグ時にスキップするファイル、フォルダー名もしくはパスのパターンマッチ形式の配列。",
			"browser.smartStep.description": "ソースマップされたファイル内のマップされていない行を自動的にステップします。たとえば、TypeScript で async/await やそのほかの機能をダウンコンパイル時に生成されるコードです。",
			"browser.sourceMapPathOverrides.description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。 詳細は README を参照してください。",
			"browser.sourceMaps.description": "JavaScript ソース マップを使用します (存在する場合)。",
			"browser.timeout.description": "ブラウザに接続するには、このミリ秒の間再試行してください。既定値は、10000 ミリ秒です。",
			"browser.url.description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
			"browser.urlFilter.description": "この URL でページを検索し、見つかった場合はアタッチします。ワイルドカードとして * を使用できます。",
			"browser.userDataDir.description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。",
			"browser.webRoot.description": "これは Web サーバーのルートにワークスペースの絶対パスを指定します。`/app.js` のようなパスをディスク上のファイルに解決するために使用します。\"/\" のパスマッピングの省略形です。",
			"chrome.attach.description": "既にデバッグ モードになっている Chrome のインスタンスにアタッチする",
			"chrome.attach.label": "Chrome: アタッチ",
			"chrome.label": "Chrome (プレビュー)",
			"chrome.launch.description": "Chrome を起動して URL をデバッグする",
			"chrome.launch.label": "Chrome: 起動",
			"configuration.automaticallyTunnelRemoteServer": "リモート Web アプリをデバッグするときに、リモート サーバーを自動的にローカル マシンにトンネルするかどうかを構成します。",
			"configuration.debugByLinkOptions": "デバッグ時に使用したオプションによって、デバッグ ターミナル内からクリックしたリンクが開きます。\"false\" に設定にすると、この動作を無効にできます。",
			"configuration.npmScriptLensLocation": "npm スクリプトで \"実行\" と \"デバッグ\" のコード レンズが表示される場所。\"すべて\" のスクリプトまたはスクリプト セクションの \"上\" に表示するか、\"表示しない\" を指定できます。",
			"configuration.suggestPrettyPrinting": "お客様がそれにステップ インしたときに縮小されたように見える JavaScript コードの再フォーマットを提案するかどうか。",
			"configuration.terminalOptions": "JavaScript デバッグ ターミナルおよび npm スクリプトの既定の起動オプション。",
			"configuration.usePreview": "Node.js と Chrome にプレビュー段階の新しい JavaScript デバッガ―を使用します。",
			"configuration.warnOnLongPrediction": "ブレークポイント予測に時間がかかる場合に、読み込み中のプロンプトを表示するかどうか。",
			"debug.npm.edit": "package.json を編集",
			"debug.npm.noScripts": "package.json に npm スクリプトがありません",
			"debug.npm.noWorkspaceFolder": "npm スクリプトをデバッグするには、ワークスペース フォルダーを開く必要があります。",
			"debug.npm.parseError": "{0} を読み取ることができませんでした: {1}",
			"debug.npm.script": "NPM スクリプトのデバッグ",
			"debug.terminal.label": "JavaScript デバッグ ターミナルの作成",
			"debug.terminal.program.description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
			"debug.terminal.snippet.label": "デバッグ ターミナルで \"npm start\" を実行する",
			"debug.terminal.welcome": "[Node.js デバッグ ターミナル](command:extension.pwa-node-debug.createDebuggerTerminal)\n\nNode.js デバッグ ターミナルを使用して、コマンド ラインから実行する JavaScript をすばやくデバッグできます。",
			"edge.attach.description": "Microsoft Edge のインスタンスへのアタッチは既にデバッグ モードです",
			"edge.attach.label": "Microsoft Edge: アタッチ",
			"edge.label": "Microsoft Edge (プレビュー)",
			"edge.launch.description": "Microsoft Edge を起動して URL をデバッグする",
			"edge.launch.label": "Microsoft Edge: 起動",
			"edge.useWebView.description": "(Microsoft Edge (Chromium) のみ) 'true' の場合、デバッガーはランタイム実行可能ファイルを WebView を含むホスト アプリケーションとして処理するため、ユーザーは WebView スクリプトの内容をデバッグできます。",
			"errors.timeout": "{0}: {1} ミリ秒後にタイムアウト",
			"extension.description": "Node.js プログラムと Chrome をデバッグするための拡張機能。",
			"extensionHost.label": "VS Code 拡張機能の開発 (プレビュー)",
			"extensionHost.launch.config.name": "拡張機能の起動",
			"extensionHost.launch.env.description": "拡張機能ホストに渡された環境変数。",
			"extensionHost.launch.runtimeExecutable.description": "VS Code への絶対パス。",
			"extensionHost.launch.stopOnEntry.description": "起動後に拡張機能ホストを自動的に停止します。",
			"extensionHost.snippet.launch.description": "VS Code 拡張機能をデバッグ モードで起動します",
			"extensionHost.snippet.launch.label": "VS Code 拡張機能の開発",
			"longPredictionWarning.disable": "今後表示しない",
			"longPredictionWarning.message": "ブレークポイントの構成に時間がかかっています。launch.json で 'outFiles' を更新することによって、スピードアップさせることができます。",
			"longPredictionWarning.noFolder": "開いているワークスペース フォルダーがありません。",
			"longPredictionWarning.open": "launch.json を開く",
			"node.address.description": "デバッグするプロセスの TCP/IP アドレス。既定値は 'localhost' です。",
			"node.attach.attachExistingChildren.description": "生成済みの子プロセスにアタッチを試行するかどうか。",
			"node.attach.attachSpawnedProcesses.description": "生成された子を追跡するために、アタッチされたプロセスで環境変数を設定するかどうか。",
			"node.attach.config.name": "アタッチ",
			"node.attach.continueOnAttach": "true の場合、`--inspect-brk`を待機中の起動済みのプログラムを自動的に再開します",
			"node.attach.processId.description": "アタッチ先のプロセスの ID。",
			"node.attach.restart.description": "接続が失われる場合は、プログラムに再接続してみてください。",
			"node.console.title": "Node デバッグ コンソール",
			"node.disableOptimisticBPs.description": "そのファイルのソースマップが読み込み終わるまで、ファイル内にブレークポイントを設定しません。",
			"node.label": "Node.js (プレビュー)",
			"node.launch.args.description": "プログラムに渡されるコマンド ライン引数。",
			"node.launch.autoAttachChildProcesses.description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
			"node.launch.config.name": "起動",
			"node.launch.console.description": "デバッグ ターゲットの起動場所です。",
			"node.launch.console.externalTerminal.description": "ユーザー設定を介して構成できる外部ターミナルです",
			"node.launch.console.integratedTerminal.description": "VS Code の統合ターミナルです",
			"node.launch.console.internalConsole.description": "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
			"node.launch.cwd.description": "デバッグされるプログラムの作業ディレクトリへの絶対パス。",
			"node.launch.env.description": "プログラムに渡される環境変数。`null` 値は環境変数から変数を削除します。",
			"node.launch.envFile.description": "環境変数の定義を含むファイルへの絶対パス。",
			"node.launch.logging": "ログ構成",
			"node.launch.logging.cdp": "Chrome DevTools Protocol メッセージのログ ファイルへのパス",
			"node.launch.logging.dap": "デバッグ アダプター プロトコル メッセージのログ ファイルへのパス",
			"node.launch.outputCapture.description": "出力メッセージのキャプチャ場所: debug API, stdout/stderr ストリーム",
			"node.launch.program.description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
			"node.launch.restart.description": "ゼロ以外の終了コードでプログラムが終了した場合は、プログラムを再起動してみてください。",
			"node.launch.runtimeArgs.description": "ランタイム実行可能ファイルに渡される省略可能な引数。",
			"node.launch.runtimeExecutable.description": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
			"node.launch.runtimeVersion.description": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
			"node.launch.useWSL.deprecation": "'useWSL' は廃止され、サポートが終了されます。代わりに 'Remote - WSL' 拡張機能を使用します。",
			"node.launch.useWSL.description": "Windows Subsystem for Linux を使用します。",
			"node.localRoot.description": "プログラムの入ったローカル ディレクトリへのパス。",
			"node.pauseForSourceMap.description": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
			"node.port.description": "添付先のデバッグ ポート。既定は 5858 です。",
			"node.processattach.config.name": "プロセスにアタッチ",
			"node.remoteRoot.description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
			"node.resolveSourceMapLocations.description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
			"node.showAsyncStacks.description": "現在の呼び出し履歴の原因となった非同期呼び出しを表示します。",
			"node.snippet.attach.description": "実行中のノード プログラムにアタッチします",
			"node.snippet.attach.label": "Node.js: アタッチ",
			"node.snippet.attachProcess.description": "プロセス ピッカーを開いて、アタッチ先の node プロセスを選択します",
			"node.snippet.attachProcess.label": "Node.js: プロセスへのアタッチ",
			"node.snippet.electron.description": "Electron のメイン プロセスをデバッグします",
			"node.snippet.electron.label": "Node.js: Electron (メイン)",
			"node.snippet.gulp.description": "gulp タスクをデバッグします (プロジェクトにローカルの gulp がインストールされていることを確認します)",
			"node.snippet.gulp.label": "Node.js: Gulp タスク",
			"node.snippet.launch.description": "ノード プログラムをデバッグ モードで起動します",
			"node.snippet.launch.label": "Node.js: プログラムの起動",
			"node.snippet.mocha.description": "Mocha テストをデバッグします",
			"node.snippet.mocha.label": "Node.js: Mocha テスト",
			"node.snippet.nodemon.description": "nodemon を使用してソース変更時にデバッグ セッションを再起動します",
			"node.snippet.nodemon.label": "Node.js: nodemon のセットアップ",
			"node.snippet.npm.description": "npm の `debug` スクリプトにより Node プログラムを起動します",
			"node.snippet.npm.label": "Node.js: NPM による起動",
			"node.snippet.remoteattach.description": "リモート ノード プログラムのデバッグ ポートにアタッチします",
			"node.snippet.remoteattach.label": "Node.js: リモート プログラムにアタッチする",
			"node.snippet.yo.description": "yeoman ジェネレーターをデバッグします (プロジェクト フォルダーで `npm link` を実行してインストールします)",
			"node.snippet.yo.label": "Node.js: Yeoman ジェネレーター",
			"node.sourceMapPathOverrides.description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
			"node.sourceMaps.description": "JavaScript ソース マップを使用します (存在する場合)。",
			"node.stopOnEntry.description": "起動後、プログラムを自動的に停止します。",
			"node.timeout.description": "このミリ秒の間、Node.js への接続を再試行します。既定値は 10000 ミリ秒です。",
			"outFiles.description": "ソース マップを有効にすると、これらの glob パターンは生成した JavaScript ファイルを指定します。パターンが `!` で始まる場合は、ファイルは除外されます。指定しない場合は、生成されたコードはそのソースと同じディレクトリ内にあると想定されます。",
			"pretty.print.script": "デバッグ用の整形出力",
			"profile.start": "パフォーマンス プロファイルの取得",
			"profile.stop": "パフォーマンス プロファイルの停止",
			"remove.browser.breakpoint": "ブラウザー ブレークポイントの削除",
			"remove.browser.breakpoint.all": "すべてのブラウザー ブレークポイントを削除",
			"skipFiles.description": "デバッグ時にスキップするファイルの glob パターンの配列。パターン `<node_internals>/**` はすべての内部 Node.js モジュールに一致します。",
			"smartStep.description": "元のソースにマップし直すことができない、生成されたコードを自動的にステップ スルーします。",
			"start.with.stop.on.entry": "デバッグを開始して、エントリで停止する",
			"toggle.skipping.this.file": "このファイルをスキップする",
			"trace.boolean.description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
			"trace.console.description": "ログをデバッグ コンソールにも返すかどうかを構成します。",
			"trace.description": "生成される診断出力を構成します。",
			"trace.level.description": "記録されるログのレベルを構成します。",
			"trace.logFile.description": "ディスク上のログが書き込まれる場所を構成します。",
			"trace.stdio.description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
			"trace.tags.description": "記録するログの種類を構成します。"
		}
	}
}